# frozen_string_literal: true

module Wpxf
  # Provides functionality for specifying module metadata.
  module ModuleInfo
    # Initialize a new instance of {ModuleInfo}.
    def initialize
      super
      @info = {}
    end

    # Update the module info.
    # @param info [Hash] a hash containing the module info.
    def update_info(info)
      required_keys = %i[name desc author date]
      unless required_keys.all? { |key| info.key?(key) || @info.key?(key) }
        raise 'Missing one or more required module info keys'
      end

      @info.merge!(info)
      @info[:date] = Date.parse(@info[:date].to_s)
      @info[:desc] = @info[:desc].gsub(/  +/, ' ')
      @info
    end

    # @return [String] the name of the module.
    def module_name
      @info[:name]
    end

    # @return [String] the description of the module.
    def module_desc
      @info[:desc]
    end

    # @return [Array] an aray of references relating to the module.
    def module_references
      @info[:references]
    end

    # @return [Array] the name of the module author(s).
    def module_author
      @info[:author]
    end

    # @return [Date] the disclosure date of the vulnerability.
    def module_date
      @info[:date]
    end

    # @return [Boolean] true if the description is preformatted.
    def module_description_preformatted
      @info[:desc_preformatted]
    end

    # Emits any information that the user should be aware of before using the module.
    def emit_usage_info
      nil
    end
  end
end
